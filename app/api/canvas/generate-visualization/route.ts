import { NextResponse } from 'next/server';
import { createClient } from '@/utils/supabase/server';
import crypto from 'crypto';

// Function to calculate MD5 hash
function md5(str: string) {
  return crypto.createHash("md5").update(str).digest("hex");
}

// Function to generate Pusher authentication signature
function generatePusherSignature(stringToSign: string, secret: string) {
  return crypto.createHmac("sha256", secret).update(stringToSign).digest("hex");
}

// Pusher configuration
const pusherConfig = {
  appId: "1971423",
  key: "96f9360f34a831ca1901",
  secret: process.env.PUSHER_SECRET || "c508bc54a2ca619cfab8",
  cluster: "us3",
};

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { canvasId, messages, elements } = body;
    
    if (!canvasId) {
      return NextResponse.json(
        { error: 'Missing canvasId' }, 
        { status: 400 }
      );
    }

    // Verify user is authenticated
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      return NextResponse.json(
        { error: 'Unauthorized' }, 
        { status: 401 }
      );
    }
    
    try {
      // Create a test visualization by calling the worker's test endpoint
      // In production, this would be a direct API call to the worker with proper error handling
      const workerUrl = process.env.WORKER_URL || 'http://localhost:3001';
      const response = await fetch(`${workerUrl}/test-canvas-visualization`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          canvasId,
          // We can include additional data here to help the worker make a better visualization
          messageCount: messages?.length || 0,
          elementCount: elements?.length || 0,
        }),
      });

      if (!response.ok) {
        const text = await response.text();
        console.error('Error from worker:', text);
        throw new Error(`Worker returned ${response.status}: ${text}`);
      }

      // The worker will store the visualization in the database and send a Pusher event
      return NextResponse.json({ 
        success: true, 
        message: 'Visualization request sent to worker'
      });
    } catch (error) {
      console.error('Error requesting visualization from worker:', error);
      
      // As a fallback, generate a basic visualization directly in the API route
      // In a production app, you would have more robust error handling
      const aiAssistantId = user.id; // For simplicity, attribute to current user
      
      // Create a simple HTML visualization
      const simpleHtml = `
        <!DOCTYPE html>
        <html>
        <head>
          <style>
            body {
              font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              margin: 0;
              padding: 20px;
              background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
              height: 100vh;
              display: flex;
              align-items: center;
              justify-content: center;
              color: #334155;
            }
            .container {
              max-width: 100%;
              background: white;
              padding: 20px;
              border-radius: 10px;
              box-shadow: 0 4px 6px rgba(0,0,0,0.1);
              text-align: center;
            }
            h2 {
              margin-top: 0;
              color: #3b82f6;
            }
            p {
              line-height: 1.6;
              margin-bottom: 0;
            }
            .element-count {
              margin: 20px 0;
              font-size: 2rem;
              font-weight: bold;
              color: #3b82f6;
            }
            .message-count {
              margin-bottom: 20px;
              font-size: 1.5rem;
              font-weight: bold;
              color: #10b981;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <h2>Canvas Summary</h2>
            <div class="element-count">${elements?.length || 0} Elements</div>
            <div class="message-count">${messages?.length || 0} Messages</div>
            <p>The worker service is unavailable. This is a fallback visualization.</p>
            <p>In production, this would be generated by an AI model based on your canvas elements and messages.</p>
          </div>
        </body>
        </html>
      `;

      // Store the fallback visualization in the database
      const { data: generation, error: insertError } = await supabase
        .from("canvas_generations")
        .insert({
          canvas_id: canvasId,
          html: simpleHtml,
          summary: "Fallback visual summary (worker unavailable)",
          created_by: aiAssistantId,
          type: "visualization",
          metadata: {
            fallback: true,
            elementCount: elements?.length || 0,
            messageCount: messages?.length || 0,
          },
        })
        .select()
        .single();

      if (insertError) {
        return NextResponse.json(
          { error: 'Failed to store fallback visualization' }, 
          { status: 500 }
        );
      }

      // Send a notification to clients about the new generation via Pusher
      const timestamp = Math.floor(Date.now() / 1000);
      const eventData = JSON.stringify({
        generation_id: generation.id,
        type: "visualization",
        created_at: generation.created_at,
      });
      
      const body_pusher = JSON.stringify({
        name: "new-generation",
        channel: `canvas-${canvasId}`,
        data: eventData,
      });

      const bodyMd5 = md5(body_pusher);
      const stringToSign = `POST\n/apps/${pusherConfig.appId}/events\nauth_key=${pusherConfig.key}&auth_timestamp=${timestamp}&auth_version=1.0&body_md5=${bodyMd5}`;
      const signature = generatePusherSignature(stringToSign, pusherConfig.secret);

      const url = `https://api-${pusherConfig.cluster}.pusher.com/apps/${pusherConfig.appId}/events?auth_key=${pusherConfig.key}&auth_timestamp=${timestamp}&auth_version=1.0&body_md5=${bodyMd5}&auth_signature=${signature}`;

      try {
        const pusherResponse = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: body_pusher,
        });

        if (!pusherResponse.ok) {
          console.error('Error sending event to Pusher:', await pusherResponse.text());
        }
      } catch (pusherError) {
        console.error('Error notifying Pusher of fallback visualization:', pusherError);
      }

      return NextResponse.json({ 
        success: true, 
        message: 'Fallback visualization generated',
        fallback: true,
      });
    }
  } catch (error) {
    console.error('Error in canvas-visualization API:', error);
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    );
  }
}