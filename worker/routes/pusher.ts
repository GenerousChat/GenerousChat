/**
 * Pusher test endpoints
 */
import express, { Request, Response } from 'express';
import logger from '../utils/logger.js';
import pusherService from '../services/pusher.js';

// Define the VisualizationData interface locally to avoid import issues
interface VisualizationData {
  html: string;
  metadata?: Record<string, any>;
}

const router = express.Router();

// Define interface for request body
interface PusherTestRequest {
  roomId?: string;
  message?: string;
  messageType?: string;
  htmlContent?: string;
}

/**
 * POST /test-pusher
 * Test Pusher integration
 */
router.post('/', async (req: Request, res: Response) => {
  try {
    logger.info('Testing Pusher integration');
    const { roomId = 'test-room', message = 'Test message', messageType = 'text', htmlContent } = req.body as PusherTestRequest;

    if (messageType === 'html') {
      // Test sending HTML content
      const html = htmlContent || `
        <!DOCTYPE html>
        <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            h1 { color: #4a6fa5; }
            p { line-height: 1.6; }
          </style>
        </head>
        <body>
          <div class="container">
            <h1>Test HTML Content</h1>
            <p>This is a test HTML page generated by the worker. In a real scenario, this would contain a creative summary or visualization of the conversation.</p>
            <p>The actual content would be much more detailed and relevant to the conversation topics.</p>
          </div>
        </body>
        </html>
      `;

      // Send HTML content as a special event type
      logger.info('Sending test HTML visualization to Pusher');

      const visualizationData: VisualizationData = {
        html: html,
        metadata: {
          id: 'test-viz-' + Date.now(),
          summary: 'Test HTML Visualization',
          created_at: new Date().toISOString(),
          user_id: 'test-user',
        }
      };

      try {
        await pusherService.sendHtmlVisualization(roomId, visualizationData);
        logger.info('Test HTML visualization successfully sent to Pusher');
        res.status(200).json({
          success: true,
          message: 'Test HTML visualization sent to Pusher',
        });
      } catch (error) {
        logger.error('Error sending test HTML visualization to Pusher:', error instanceof Error ? error.message : String(error));
        res.status(500).json({ error: 'Failed to send HTML visualization to Pusher' });
      }
    } else {
      // Regular text message
      await pusherService.sendNewMessage(roomId, {
        id: 'test-' + Date.now(),
        content: message,
        created_at: new Date().toISOString(),
        user_id: 'test-user',
      });

      res.status(200).json({ success: true, message: 'Test message sent to Pusher' });
    }
  } catch (error) {
    logger.error('Error testing Pusher:', error instanceof Error ? error.message : String(error));
    res.status(500).json({ error: 'Failed to send test message to Pusher' });
  }
});

export default router;
